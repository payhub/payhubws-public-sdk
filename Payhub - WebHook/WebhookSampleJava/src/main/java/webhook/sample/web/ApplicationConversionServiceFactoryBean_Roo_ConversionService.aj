// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package webhook.sample.web;

import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;
import webhook.sample.domain.Notifications;
import webhook.sample.web.ApplicationConversionServiceFactoryBean;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<Notifications, String> ApplicationConversionServiceFactoryBean.getNotificationsToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<webhook.sample.domain.Notifications, java.lang.String>() {
            public String convert(Notifications notifications) {
                return new StringBuilder().append(notifications.getNotification()).toString();
            }
        };
    }
    
    public Converter<Long, Notifications> ApplicationConversionServiceFactoryBean.getIdToNotificationsConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, webhook.sample.domain.Notifications>() {
            public webhook.sample.domain.Notifications convert(java.lang.Long id) {
                return Notifications.findNotifications(id);
            }
        };
    }
    
    public Converter<String, Notifications> ApplicationConversionServiceFactoryBean.getStringToNotificationsConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, webhook.sample.domain.Notifications>() {
            public webhook.sample.domain.Notifications convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Notifications.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getNotificationsToStringConverter());
        registry.addConverter(getIdToNotificationsConverter());
        registry.addConverter(getStringToNotificationsConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
